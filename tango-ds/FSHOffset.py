#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        FSHOffset.py
#
#  Project :     FSHOffset
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sblanch$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["FSHOffset", "FSHOffsetClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(FSHOffset.additionnal_import) ENABLED START -----#
from FSHProcess import FSH
#----- PROTECTED REGION END -----#	//	FSHOffset.additionnal_import

# Device States Description
# INIT : 
# FAULT : 
# ON : 


class FSHOffset (PyTango.Device_4Impl):
    """Very simple Tango device server to, in an Horizontal FS, set the chamber offset when the motor moves."""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(FSHOffset.global_variables) ENABLED START -----#
    def change_state(self, newstate):
        if newstate != self.get_state():
            self.push_change_event('State', newstate)
            self.set_state(newstate)

    def change_status(self, newstatus):
        if newstatus != self.get_status():
            self.push_change_event('Status', newstatus)
            self.set_status(newstatus)
    #----- PROTECTED REGION END -----#	//	FSHOffset.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        FSHOffset.init_device(self)
        #----- PROTECTED REGION ID(FSHOffset.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FSHOffset.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(FSHOffset.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FSHOffset.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_offset_read = 0.0
        #----- PROTECTED REGION ID(FSHOffset.init_device) ENABLED START -----#
        self.set_change_event('State', True, False)
        self.set_change_event('Status', True, False)
        self.change_state(PyTango.DevState.INIT)
        self.change_status("Initializing...")
        try:
            self._fsh = FSH(self.motor, self.iba, self.formula,
                            error=self.error_stream, warning=self.warn_stream,
                            info=self.info_stream, debug=self.debug_stream)
        except Exception as e:
            self.error_stream("Cannot build the FSH object: %s" % e)
            self.change_state(PyTango.DevState.FAULT)
            self.change_status("Review the properties")
            return
        self.info_stream("Prepared the device to work with the formula %s"
                         % (self._fsh.formula))
        self.set_change_event('Offset', True, False)
        self.change_state(PyTango.DevState.ON)
        self.change_status("Ready...")
        #----- PROTECTED REGION END -----#	//	FSHOffset.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(FSHOffset.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FSHOffset.always_executed_hook

    # -------------------------------------------------------------------------
    #    FSHOffset read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_offset(self, attr):
        self.debug_stream("In read_offset()")
        #----- PROTECTED REGION ID(FSHOffset.offset_read) ENABLED START -----#
        self.attr_offset_read = self._fsh.offset
        attr.set_value(self.attr_offset_read)
        
        #----- PROTECTED REGION END -----#	//	FSHOffset.offset_read
        
    def write_offset(self, attr):
        self.debug_stream("In write_offset()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(FSHOffset.offset_write) ENABLED START -----#
        if hasattr(self, '_fsh') and self._fsh is not None:
            self._fsh.offset = data
            self.push_change_event('Offset', self._fsh.offset)
        else:
            self.warn_stream("write_offset when not build the FSH() object")
        #----- PROTECTED REGION END -----#	//	FSHOffset.offset_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(FSHOffset.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FSHOffset.read_attr_hardware


    # -------------------------------------------------------------------------
    #    FSHOffset command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(FSHOffset.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	FSHOffset.programmer_methods

class FSHOffsetClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(FSHOffset.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	FSHOffset.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'motor':
            [PyTango.DevString, 
             '',
            [] ],
        'iba':
            [PyTango.DevString, 
             '',
            [] ],
        'formula':
            [PyTango.DevString, 
             '',
            [] ],
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'offset':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(FSHOffsetClass, FSHOffset, 'FSHOffset')
        #----- PROTECTED REGION ID(FSHOffset.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	FSHOffset.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
